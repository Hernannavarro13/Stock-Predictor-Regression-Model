from sklearn.model_selection import TimeSeriesSplit
import ModelSelector as Model
import PredictionTarget as predictor
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import numpy as np
import TrainTestSplit as Train
import DataCollector as stock

tscv = TimeSeriesSplit(n_splits=5)
best_model_name = "Ridge Regression"  # Replace with your best model
best_model = Model.models[best_model_name]

X= predictor.X.copy()
y= predictor.y.copy()
scaler = StandardScaler()
cv_scores = []

for train_index, test_index in tscv.split(X):
    X_train_cv, X_test_cv = X.iloc[train_index], X.iloc[test_index]
    y_train_cv, y_test_cv = y.iloc[train_index], y.iloc[test_index]
    
    # Scale the data
    X_train_cv_scaled = scaler.fit_transform(X_train_cv)
    X_test_cv_scaled = scaler.transform(X_test_cv)
    
    # Train and evaluate
    best_model.fit(X_train_cv_scaled, y_train_cv)
    predictions = best_model.predict(X_test_cv_scaled)
    mse = mean_squared_error(y_test_cv, predictions)
    cv_scores.append(mse)

print(f"\nTime Series Cross-Validation MSE scores: {cv_scores}")
print(f"Average MSE: {np.mean(cv_scores):.4f}")



